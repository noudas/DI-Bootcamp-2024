ðŸŒŸ Exercise 1: Implement a Theme Switcher
Instructions
Objective: Create a theme switcher component that allows users to toggle between light and dark themes using useContext and useState.

Set up a new React project using create-react-app or your preferred method.

Create a context for managing the theme (light/dark mode).

Implement a theme switcher component that toggles between light and dark themes when clicked.

Use useContext to access the current theme in other components and apply the theme styles.

Hints:

You can create a context with a default theme value (e.g., light) and a function to toggle the theme.

The theme switcher component should have a button that, when clicked, calls the theme toggling function provided by the context.

Apply different styles (CSS or inline styles) to your components based on the current theme.



ðŸŒŸ Exercise 2: Implement a Character Counter
Instructions
Objective: Create a React component that displays a character counter for a text input. The counter should update in real-time as the user types using the useRef hook.

Set up a new React project using create-react-app or your preferred method.

Create a component that includes a text input and a counter display.

Use the useRef hook to create a reference to the text input element.

Implement an event handler that listens for changes in the text input.

Use the useRef reference to track the length of the text in the input and update the counter display accordingly.

Hints:

You can use the inputRef.current.value.length property to get the length of the text in the input.

Attach an event listener to the text inputâ€™s input event to listen for changes in the input.